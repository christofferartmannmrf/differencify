{"version":3,"sources":["../../src/utils/paths.js"],"names":["getTestRoot","testConfig","globalConfig","testRoot","isJest","path","dirname","testPath","resolve","pkgDir","sync","imageSnapshotPath","fs","existsSync","mkdirSync","getSnapshotsDir","join","getDiffDir","snapshotsDir","getSnapshotPath","Error","testName","imageType","getDiffPath","diffDir","getCurrentImageDir","getCurrentImagePath","currentImageDir"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAEA,MAAMA,cAAc,CAACC,UAAD,EAAaC,YAAb,KAA8B;AAChD,MAAIC,QAAJ;AACA,MAAIF,WAAWG,MAAf,EAAuB;AACrBD,eAAWE,eAAKC,OAAL,CAAaL,WAAWM,QAAxB,CAAX;AACD,GAFD,MAEO;AACLJ,eAAWE,eAAKG,OAAL,CAAaC,iBAAOC,IAAP,EAAb,EAA4BR,aAAaS,iBAAzC,CAAX;AACD;AACD,MAAI,CAACC,aAAGC,UAAH,CAAcV,QAAd,CAAL,EAA8B;AAC5BS,iBAAGE,SAAH,CAAaX,QAAb;AACD;AACD,SAAOA,QAAP;AACD,CAXD;;AAaO,MAAMY,4CAAkB,CAACd,UAAD,EAAaC,YAAb,KAA8BG,eAAKW,IAAL,CAC3DhB,YAAYC,UAAZ,EAAwBC,YAAxB,CAD2D,EAE3D,qBAF2D,CAAtD;;AAKA,MAAMe,kCAAaC,gBAAgBb,eAAKW,IAAL,CAAUE,YAAV,EAAwB,2BAAxB,CAAnC;;AAEA,MAAMC,4CAAkB,CAACD,YAAD,EAAejB,UAAf,KAA8B;AAC3D,MAAI,CAACiB,YAAD,IAAiB,CAACjB,UAAtB,EAAkC;AAChC,UAAM,IAAImB,KAAJ,CAAU,+CAAV,CAAN;AACD;AACD,SAAOf,eAAKW,IAAL,CAAUE,YAAV,EAAyB,GAAEjB,WAAWoB,QAAS,SAAQpB,WAAWqB,SAAX,IAAwB,KAAM,EAArF,CAAP;AACD,CALM;;AAOA,MAAMC,oCAAc,CAACC,OAAD,EAAUvB,UAAV,KAAyB;AAClD,MAAI,CAACuB,OAAD,IAAY,CAACvB,UAAjB,EAA6B;AAC3B,UAAM,IAAImB,KAAJ,CAAU,2CAAV,CAAN;AACD;AACD,SAAOf,eAAKW,IAAL,CAAUQ,OAAV,EAAoB,GAAEvB,WAAWoB,QAAS,mBAAkBpB,WAAWqB,SAAX,IAAwB,KAAM,EAA1F,CAAP;AACD,CALM;;AAOA,MAAMG,kDAAqBP,gBAAgBb,eAAKW,IAAL,CAAUE,YAAV,EAAwB,oBAAxB,CAA3C;;AAEA,MAAMQ,oDAAsB,CAACC,eAAD,EAAkB1B,UAAlB,KAAiC;AAClE,MAAI,CAAC0B,eAAD,IAAoB,CAAC1B,UAAzB,EAAqC;AACnC,UAAM,IAAImB,KAAJ,CAAU,2CAAV,CAAN;AACD;AACD,SAAOf,eAAKW,IAAL,CAAUW,eAAV,EAA4B,GAAE1B,WAAWoB,QAAS,YAAWpB,WAAWqB,SAAX,IAAwB,KAAM,EAA3F,CAAP;AACD,CALM","file":"paths.js","sourcesContent":["import path from 'path';\nimport pkgDir from 'pkg-dir';\nimport fs from 'fs';\n\nconst getTestRoot = (testConfig, globalConfig) => {\n  let testRoot;\n  if (testConfig.isJest) {\n    testRoot = path.dirname(testConfig.testPath);\n  } else {\n    testRoot = path.resolve(pkgDir.sync(), globalConfig.imageSnapshotPath);\n  }\n  if (!fs.existsSync(testRoot)) {\n    fs.mkdirSync(testRoot);\n  }\n  return testRoot;\n};\n\nexport const getSnapshotsDir = (testConfig, globalConfig) => path.join(\n  getTestRoot(testConfig, globalConfig),\n  '__image_snapshots__',\n);\n\nexport const getDiffDir = snapshotsDir => path.join(snapshotsDir, '__differencified_output__');\n\nexport const getSnapshotPath = (snapshotsDir, testConfig) => {\n  if (!snapshotsDir || !testConfig) {\n    throw new Error('Incorrect arguments passed to getSnapshotPath');\n  }\n  return path.join(snapshotsDir, `${testConfig.testName}.snap.${testConfig.imageType || 'png'}`);\n};\n\nexport const getDiffPath = (diffDir, testConfig) => {\n  if (!diffDir || !testConfig) {\n    throw new Error('Incorrect arguments passed to getDiffPath');\n  }\n  return path.join(diffDir, `${testConfig.testName}.differencified.${testConfig.imageType || 'png'}`);\n};\n\nexport const getCurrentImageDir = snapshotsDir => path.join(snapshotsDir, '__current_output__');\n\nexport const getCurrentImagePath = (currentImageDir, testConfig) => {\n  if (!currentImageDir || !testConfig) {\n    throw new Error('Incorrect arguments passed to getDiffPath');\n  }\n  return path.join(currentImageDir, `${testConfig.testName}.current.${testConfig.imageType || 'png'}`);\n};\n"]}