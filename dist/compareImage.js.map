{"version":3,"sources":["../src/compareImage.js"],"names":["saveDiff","diff","diffPath","Promise","resolve","reject","cb","error","obj","image","write","cleanUpImages","images","forEach","fs","unlinkSync","e","compareImage","capturedImage","globalConfig","testConfig","prefixedLogger","logger","prefix","testName","snapshotsDir","imageSnapshotPathProvided","path","imageSnapshotPath","snapshotPath","diffDir","currentImageDir","currentImagePath","existsSync","isUpdate","snapshotImage","Jimp","read","trace","matched","testImage","log","distance","mismatchThreshold","percent","diffPercent","saveCurrentImage","mkdirSync","writeFileSync","saveDifferencifiedImage","updated","added"],"mappings":"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","file":"compareImage.js","sourcesContent":["import Jimp from 'jimp';\nimport path from 'path';\nimport fs from 'fs';\n\nimport logger from './utils/logger';\nimport {\n  getSnapshotsDir,\n  getSnapshotPath,\n  getDiffDir,\n  getDiffPath,\n  getCurrentImageDir,\n  getCurrentImagePath,\n} from './utils/paths';\n\nconst saveDiff = (diff, diffPath) => new Promise((resolve, reject) => {\n  const cb = (error, obj) => {\n    if (error) {\n      reject(error);\n    }\n    resolve(obj);\n  };\n  diff.image.write(diffPath, cb);\n});\n\nconst cleanUpImages = (images) => {\n  images.forEach((image) => {\n    try {\n      fs.unlinkSync(image);\n    } catch (e) {\n      // ignore error as left over image may not exist\n    }\n  });\n};\n\nconst compareImage = async (capturedImage, globalConfig, testConfig) => {\n  const prefixedLogger = logger.prefix(testConfig.testName);\n  const snapshotsDir = globalConfig.imageSnapshotPathProvided\n    ? path.resolve(globalConfig.imageSnapshotPath)\n    : getSnapshotsDir(testConfig, globalConfig);\n\n  const snapshotPath = getSnapshotPath(snapshotsDir, testConfig);\n\n  const diffDir = getDiffDir(snapshotsDir);\n  const diffPath = getDiffPath(diffDir, testConfig);\n\n  const currentImageDir = getCurrentImageDir(snapshotsDir);\n  const currentImagePath = getCurrentImagePath(currentImageDir, testConfig);\n\n  cleanUpImages([diffPath, currentImagePath]);\n\n  if (fs.existsSync(snapshotPath) && !testConfig.isUpdate) {\n    let snapshotImage;\n    try {\n      snapshotImage = await Jimp.read(snapshotPath);\n    } catch (error) {\n      prefixedLogger.error(`failed to read reference image: ${snapshotPath}`);\n      prefixedLogger.trace(error);\n      return { error: 'failed to read reference image', matched: false };\n    }\n    let testImage;\n    try {\n      testImage = await Jimp.read(capturedImage);\n    } catch (error) {\n      prefixedLogger.error('failed to read current screenshot image');\n      prefixedLogger.trace(error);\n      return { error: 'failed to read current screenshot image', matched: false };\n    }\n    prefixedLogger.log('comparing...');\n    const distance = Jimp.distance(snapshotImage, testImage);\n    const diff = Jimp.diff(snapshotImage, testImage, globalConfig.mismatchThreshold);\n    if (distance <= globalConfig.mismatchThreshold && diff.percent <= globalConfig.mismatchThreshold) {\n      prefixedLogger.log('no mismatch found ✅');\n      return {\n        snapshotPath, distance, diffPercent: diff.percent, matched: true,\n      };\n    }\n    if (globalConfig.saveCurrentImage) {\n      try {\n        if (!fs.existsSync(currentImageDir)) {\n          fs.mkdirSync(currentImageDir);\n        }\n        if (fs.existsSync(currentImagePath)) {\n          fs.unlinkSync(currentImagePath);\n        }\n        fs.writeFileSync(currentImagePath, capturedImage);\n      } catch (error) {\n        prefixedLogger.error(`failed to save the current image: ${currentImagePath}`);\n        prefixedLogger.trace(error);\n      }\n    }\n    if (globalConfig.saveDifferencifiedImage) {\n      try {\n        if (!fs.existsSync(diffDir)) {\n          fs.mkdirSync(diffDir);\n        }\n        if (fs.existsSync(diffPath)) {\n          fs.unlinkSync(diffPath);\n        }\n        await saveDiff(diff, diffPath);\n        prefixedLogger.log(`saved the diff image to disk at ${diffPath}`);\n      } catch (error) {\n        prefixedLogger.error(`failed to save the diff image: ${diffPath}`);\n        prefixedLogger.trace(error);\n      }\n    }\n\n    prefixedLogger.error(`mismatch found❗\n      Result:\n        distance: ${distance}\n        diff: ${diff.percent}\n        misMatchThreshold: ${globalConfig.mismatchThreshold}\n    `);\n    return {\n      snapshotPath, distance, diffPercent: diff.percent, diffPath, matched: false,\n    };\n  }\n  prefixedLogger.log(`screenshot saved in -> ${snapshotPath}`);\n  if (fs.existsSync(diffPath)) {\n    fs.unlinkSync(diffPath);\n  }\n  if (!fs.existsSync(snapshotsDir)) {\n    fs.mkdirSync(snapshotsDir);\n  }\n  fs.writeFileSync(snapshotPath, capturedImage);\n  return testConfig.isUpdate ? { updated: true } : { added: true };\n};\n\nexport default compareImage;\n"]}